package searchengine.services;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import searchengine.model.Page;
import searchengine.model.Site;
import searchengine.repositories.PageRepository;
import searchengine.repositories.SiteRepository;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.*;

@Service
public class PageCrawlerService {

    private static final Logger logger = LoggerFactory.getLogger(PageCrawlerService.class);
    private static final int MAX_THREADS = Runtime.getRuntime().availableProcessors();
    private static final int MAX_DEPTH = 10;

    private final PageRepository pageRepository;
    private final SiteRepository siteRepository;
    private final ExecutorService executorService = Executors.newFixedThreadPool(MAX_THREADS);
    private final Set<String> visitedUrls = ConcurrentHashMap.newKeySet();
    private final Set<String> alreadyLogged = ConcurrentHashMap.newKeySet(); // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    public PageCrawlerService(PageRepository pageRepository, SiteRepository siteRepository) {
        this.pageRepository = pageRepository;
        this.siteRepository = siteRepository;
    }

    public void crawlAll(List<Site> sites) {
        List<Future<?>> futures = new ArrayList<>();
        for (Site site : sites) {
            futures.add(executorService.submit(() -> crawl(site)));
        }
        for (Future<?> future : futures) {
            try {
                future.get();
            } catch (InterruptedException | ExecutionException e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—Ö–æ–¥–∞ —Å–∞–π—Ç–∞: {}", e.getMessage());
            }
        }
        executorService.shutdown();
    }

    public int crawl(Site site) {
        logger.info("üåê –ù–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {}", site.getUrl());
        visitedUrls.clear();
        alreadyLogged.clear();
        ForkJoinPool forkJoinPool = new ForkJoinPool(MAX_THREADS);
        CrawlTask rootTask = new CrawlTask(site.getUrl(), site, 0);
        forkJoinPool.invoke(rootTask);
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {}", visitedUrls.size());
        return visitedUrls.size(); // –í–æ–∑–≤—Ä–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    }

    public int getVisitedCount() {
        return visitedUrls.size();
    }


    private class CrawlTask extends RecursiveAction {
        private final String url;
        private final Site site;
        private final int depth;

        public CrawlTask(String url, Site site, int depth) {
            this.url = normalizeUrl(url);
            this.site = site;
            this.depth = depth;
        }

        @Override
        protected void compute() {
            if (depth > MAX_DEPTH) {
                logger.debug("‚è≠ –ü—Ä–æ–ø—É—Å–∫ URL: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ ({}) –¥–ª—è {}", MAX_DEPTH, url);
                return;
            }
            if (visitedUrls.contains(url)) {
                logger.debug("‚è≠ –ü—Ä–æ–ø—É—Å–∫ URL: —É–∂–µ –ø–æ—Å–µ—â—ë–Ω {}", url);
                return;
            }
            if (!url.startsWith(site.getUrl())) {
                logger.debug("‚è≠ –ü—Ä–æ–ø—É—Å–∫ URL: –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å {}", url);
                return;
            }

            visitedUrls.add(url);

            try {
                Connection.Response response = Jsoup.connect(url)
                        .ignoreContentType(true)
                        .timeout(15000)
                        .followRedirects(true)
                        .execute();

                processResponse(site, url, response, depth);
            } catch (IOException e) {
                logAndSaveErrorPage(site, url, e.getMessage());
            }
        }


        private void processResponse(Site site, String url, Connection.Response response, int depth) throws IOException {
            String contentType = response.contentType();
            String finalUrl = normalizeUrl(response.url().toString());

            if (!finalUrl.equals(url)) {
                visitedUrls.add(finalUrl);
            }

            if (contentType == null) {
                logger.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (URL: {})", url);
                return;
            }

            if (contentType.startsWith("text/")) {
                Document document = response.parse();
                savePage(site, finalUrl, response.statusCode(), document.html());
                logger.info("üìÑ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}", url);

                Elements links = document.select("a[href]");
                List<CrawlTask> tasks = new ArrayList<>();
                for (var link : links) {
                    String nextUrl = normalizeUrl(link.absUrl("href"));
                    if (nextUrl.startsWith("tel:")) {
                        processPhoneNumber(site, nextUrl);
                    } else if (!visitedUrls.contains(nextUrl)) {
                        tasks.add(new CrawlTask(nextUrl, site, depth + 1));
                    }
                }
                invokeAll(tasks);
            } else if (contentType.startsWith("image/")) {
                savePage(site, finalUrl, response.statusCode(), "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ " + contentType);
                logger.info("üñºÔ∏è –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", url);
            } else if (isSupportedFileType(contentType)) {
                savePage(site, finalUrl, response.statusCode(), "–§–∞–π–ª —Ç–∏–ø–∞ " + contentType);
                logger.info("üìÅ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {}", url);
            } else {
                logger.info("‚è≠ –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–æ–º: {}", contentType);
            }
        }

        private boolean isSupportedFileType(String contentType) {
            return contentType.equals("application/pdf") ||
                    contentType.equals("application/msword") ||
                    contentType.equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document") ||
                    contentType.equals("application/vnd.ms-excel") ||
                    contentType.equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }
    }

    private boolean savePage(Site site, String url, int statusCode, String content) {
        String relativePath = calculateRelativePath(site, url);

        synchronized (this) {
            if (pageRepository.existsBySiteAndPath(site, relativePath)) {
                logOnce("‚è≠ –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}", url);
                return false;
            }

            Page page = new Page(site, relativePath, statusCode, content);
            pageRepository.save(page);
        }

        // –Ø—Å–Ω—ã–π –ª–æ–≥ –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        if (content.startsWith("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")) {
            logger.info("üìû –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {} (–ö–æ–¥: {})", url, statusCode);
        } else if (content.startsWith("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞")) {
            logger.info("üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {} (–ö–æ–¥: {})", url, statusCode);
        } else if (content.startsWith("–§–∞–π–ª —Ç–∏–ø–∞")) {
            logger.info("üìÅ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {} (–ö–æ–¥: {})", url, statusCode);
        } else {
            logger.info("üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {} (–ö–æ–¥: {})", url, statusCode);
        }

        return true;
    }


    private void processPhoneNumber(Site site, String phoneUrl) {
        String phoneNumber = phoneUrl.replace("tel:", "");
        String content = "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: " + phoneNumber;
        synchronized (this) {
            if (pageRepository.existsBySiteAndPath(site, phoneUrl)) {
                logOnce("‚è≠ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {}", phoneNumber);
                return;
            }
            savePage(site, phoneUrl, 200, content);
        }
        logger.info("üìû –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", phoneNumber);
    }

    private void logAndSaveErrorPage(Site site, String url, String errorMessage) {
        String content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " + errorMessage;
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {} (–ü—Ä–∏—á–∏–Ω–∞: {})", url, errorMessage);

        if (errorMessage.contains("Status=404")) {
            logger.warn("‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (404): {}", url);
            return; // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 404
        }

        savePage(site, url, 500, content);
    }

    private String calculateRelativePath(Site site, String url) {
        return url.replaceFirst(site.getUrl(), "").replaceAll("^/+", "/");
    }

    private String normalizeUrl(String url) {
        return url.replaceAll("/+$", "").toLowerCase();
    }

    private void logOnce(String message, String detail) {
        if (alreadyLogged.add(detail)) {
            logger.info(message, detail);
        }
    }
}
